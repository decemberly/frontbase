/// Responsive manager.
/// @requires {variable} breakpoints
/// @param {String} $breakpoint - Breakpoint
/// @throws No value found for `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Shorthand for transitions.
/// @param {String} $transition-property [all] - The transition you want
/// @param {String} $transition-time [0.4s] - The length of the transition in seconds
/// @param {String} $method [ease-in-out] - Transition method
@mixin transition($transition-property: all, $transition-time: 0.15s, $method: ease-in-out) {
  transition: $transition-property $transition-time $method;
}

/// Shorthand for grid calculation.
/// @param {Number} $columns - The number of columns to span over.
/// @param {Number} $grid-columns - The total number of columns the grid have.
@mixin grid($columns, $grid-columns) {
  width: (grid($grid-columns) * $columns) + (grid($grid-columns, 'gutter') * ($columns - 1));
  margin-right: grid($grid-columns, 'gutter');
}

/* stylelint-disable max-nesting-depth */
/// Shorthand for all grid sizes.
/// @param {String} $breakpoint - At what breakpoint is this mixin used?
/// @param {Number} $grid-columns - how many cols does this grid have?
@mixin grid-breakpoint($breakpoint, $grid-columns) {
  @include respond-to($breakpoint) {
    @for $i from 1 through $grid-columns {
      .o-#{$i}-#{$grid-columns}\@#{$breakpoint} {
        @include grid($i,$grid-columns);

        // If divided by 2, remove margin from 2nd child
        @if $grid-columns/$i == 2 {
          &:nth-child(2n) {
            margin-right: 0;
          }

          &:nth-child(2n+1) {
            clear: left;
          }
        }

        // If divided by 3, remove margin from 3rd child
        @if $grid-columns/$i == 3 {
          &:nth-child(3n) {
            margin-right: 0;
          }

          &:nth-child(3n+1) {
            clear: left;
          }
        }

        // If divided by 4, remove margin from 4rd child
        @if $grid-columns/$i == 4 {
          &:nth-child(4n) {
            margin-right: 0;
          }

          &:nth-child(4n+1) {
            clear: left;
          }
        }

        // If divided by 6, remove margin from 6rd child
        @if $grid-columns/$i == 6 {
          &:nth-child(6n) {
            margin-right: 0;
          }

          &:nth-child(6n+1) {
            clear: left;
          }
        }

        // If divided by 12, remove margin from 6rd child
        @if $grid-columns/$i == 12 {
          &:nth-child(12n) {
            margin-right: 0;
          }

          &:nth-child(12n+1) {
            clear: left;
          }
        }

        // If divided by itself equals 1, remove margin from last child on row
        @if $grid-columns/$i == 1 {
          &:nth-child(#{$i}n) {
            margin-right: 0;
          }
        }
      }
    }
  }
}
/* stylelint-enable max-nesting-depth */

// Mixin that calculates if text needs to be light or dark
// depending on the background color passed.
// From this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast
// Color brightness is determined by the following formula: 
// ((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000
/// @param {String} $color - hexcode of color to test
@mixin text-contrast($color) {
  $color-brightness: round((red($color) * 299) + (green($color) * 587) + (blue($color) * 114) / 1000);
  $light-color: round((red(#fff) * 299) + (green(#fff) * 587) + (blue(#fff) * 114) / 1000); // #225959

  @if abs($color-brightness) < ($light-color/2) {
    color: color('white');
  }

  @else {
    color: color('black');
  }
}
